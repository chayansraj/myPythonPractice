#!/usr/bin/env python
# coding: utf-8

# # Blackjack

# ## First we need to know the cards that are dealt in the game
# ### Suits and Ranks are basically the structure of one deck
# ### One deck has 52 cards with four different suits having same rank across a suit

suits = ['Hearts', 'Spades', 'Diamonds', 'Clubs']

import string

ranks = {'two':2, 'three':3, 'four':4 , 'five':5 , 'six':6 , 'seven':7, 'eight':8 , 'nine':9, 'ten':10, 'jack':10, 'queen':10,'king':10, 'ace':11}



# # Class Definitions

# ### Firstly a player walks in to the counter and exchanges its money with chips of equal value and then from that reserve places bet, adds wins, deduct loses

class chips():
    
    def __init__(self): #attributes of a chips class
        total = int(input('Please provide your total buy-in in dollars: \n'))
        self.total = total
        self.bet=0
        
    def win_bet(self):# when a player wins a bet, add that amount to the players wallet
        self.total = self.total + self.bet
        print(f'{self.bet} added to wallet successfuly. Total amount: {self.total}')
        
        
    def lose_bet(self):
        self.total -= self.bet
        print(f'{self.bet} deducted from wallet successfuly. Total amount: {self.total}')


# ### Card class for 52 different cards in one deck

class card():
    def __init__(self, suit, rank):
        self.suit = suit
        self.rank = rank
        
    def __str__(self):
        return f'{self.rank} of {self.suit}'


# ### Deck class to hold 52 card objects and do various activities with cards
import random


class deck():
    def __init__(self):
        self.deck = []
        for suit in suits:
            for rank in ranks:
                self.deck.append(card(suit,rank))
                
    def __str__(self):
        deck_string = ' '
        for card in self.deck:
            deck_string = deck_string + '\n' + card.__str__()
        return 'The deck has:' + deck_string
    
    
    def shuffle(self):
        random.shuffle(self.deck)
        
    def deal(self):
        single_card = self.deck.pop() 
        return single_card


# ### Hand class to hold the cards for dealer and a player

class hand():
    def __init__(self):
        self.cards = []
        self.value = 0
        self.aces = 0
            
        
    def __len__(self):
        len(self.cards)
        
    def add_card(self,card):
        self.cards.append(card)
        self.value = self.value + ranks.get(str(card).split()[0])
        
        if card.rank.lower() == 'ace':
            self.aces += 1
        
    def show(self):
        cards__str = ''
        for i in self.cards:
            cards__str = str(i)  +' '+ cards__str 
        return cards__str    
    
    def adjust_for_ace(self):
        while self.value > 21 and self.aces:
            self.value = self.value-10
            self.aces -= 1


# ### Function for controlling the bet that user places
# We need to keep track of the number of rounds and correponding to each round, we need to place a bet
def place_bet(chips):
    while True:
        try:
            chips.bet = int(input('Please enter your bet: \n'))
        except:
            print('Error! Please enter only numerical value!!')
            continue
        else:
            if chips.bet > chips.total:
                print('Please enter bet less than your wallet')
                continue
            else: break
    


# ### Hit function used to call for a card from the deck

def hit(deck,hand):
    deck.shuffle()
    hand.add_card(deck.deal())





import string


# ### Function for player to decide to hit or stand

def hit_or_stand(deck,hand):
    global playing
    while True:

        player_input = input('Do you want to hit or stand? : \n')
        if player_input.lower().startswith('h'):
            hit(deck,hand)
            
            break
        elif player_input.lower().startswith('s'):
            playing = False
            break
        else:
            print('Please enter correct input!')
            continue


# ### Function for displaying some cards of dealer and all cards of player

def show_some(player,dealer):
    print("Player's Cards:")
    for card in player.cards:
        print(f'{card}')
    print(f'Total value: {player.value}')
    
    print("\n\nDealer's Cards:")
    for card in dealer.cards[:len(dealer.cards)-1]:
        print(f'{card}')
        
def show_all(player,dealer):
    print("Player's Cards:")
    for card in player.cards:
        print(f'{card}')
    print(f'Total value: {player.value}')
    
    print("\n\nDealer's Cards:")
    for card in dealer.cards:
        print(f'{card}')
    print(f'Total value: {dealer.value}')


# ### Function for displaying all the cards on the table

def player_busts(player,dealer,chips):
    print("Player busts!")
    chips.lose_bet()

def player_wins(player,dealer,chips):
    print("Player wins!")
    chips.win_bet()

def dealer_busts(player,dealer,chips):
    print("Dealer busts!")
    chips.win_bet()
    
def dealer_wins(player,dealer,chips):
    print("Dealer wins!")
    chips.lose_bet()
    
def push(player,dealer):
    print("Dealer and Player tie! It's a push.")


# # Now on to the game!!

# Printing the opening statement

while True:
    playing = True
    print('Welcome to Blackjack! We are happy to see you here\n\n')
    print('How much money would you like to exchange for chips? \n')
    player_chips = chips() # Adding chips to the player's account
    
    # Creating two decks and shuffling them: One for player and one for dealer
    player_deck = deck()
    dealer_deck = deck()
    player_deck.shuffle()
    dealer_deck.shuffle()
    
    # Now time to ask for player's initial bet and deduct it from the player's chips
    place_bet(player_chips)
    
    player_hand = hand()
    dealer_hand = hand()
    # We have to deal two cards to each dealer and player
    player_hand.add_card(player_deck.deal())
    player_hand.add_card(player_deck.deal())
    dealer_hand.add_card(dealer_deck.deal())
    dealer_hand.add_card(dealer_deck.deal())  
    # Now both player and dealer have two two cards
    
    # Time to show the cards keeping one dealer card hidden
    show_some(player_hand,dealer_hand)
    if player_hand.value == 21:
        print('Blackjack in first hand! Amazing!')
        break
    
    #Prompting the player to hit or stand
    while playing:
        hit_or_stand(player_deck,player_hand)
        player_hand.adjust_for_ace()
        print('\n')
        # Showing the new cards again
        show_some(player_hand,dealer_hand)
        
        if player_hand.value > 21:
            player_busts(player_hand,dealer_hand,player_chips)
            break
            
    if player_hand.value <=21:  
        
        
        while dealer_hand.value < 17:
            hit(dealer_deck,dealer_hand)
        print('\n')
                
        show_all(player_hand,dealer_hand)
        
        if dealer_hand.value >21:
            dealer_busts(player_hand,dealer_hand,player_chips)
            
        elif dealer_hand.value > player_hand.value:
            dealer_wins(player_hand,dealer_hand,player_chips)
            
        elif dealer_hand.value < player_hand.value:
            player_wins(player_hand,dealer_hand,player_chips)
            
        else:
            push(player_hand,dealer_hand)
            
        
        print(f'Total chips at the end are {player_chips.total}\n\n')
        
    print('Would you like to play agaian? \n')
    new_game = input('Please enter yes or no: ')
    print('\n')
    if new_game.lower().startswith('y'):
        continue
    else:
        print('                    Thank you for your time! Come again soon!')
        break
            




